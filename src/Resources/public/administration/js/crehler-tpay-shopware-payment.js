(function(){"use strict";var e={};e.p="bundles/crehlertpayshopwarepayment/",window?.__sw__?.assetPath&&(e.p=window.__sw__.assetPath+"/bundles/crehlertpayshopwarepayment/"),function(){/**
 * @copyright 2020 Tpay Krajowy Integrator Płatności S.A. <https://tpay.com/>
 *
 * @author    Jakub Medyński <jme@crehler.com>
 * @support   Tpay <pt@tpay.com>
 * @created   29 kwi 2020
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */let{Component:e,Mixin:t}=Shopware;e.register("tpay-test-merchant-credentials-button",{template:'{% block tpay_shopware_payment_test_merchant_credentials_button %}\n    <sw-button-process :isLoading="isLoading" :processSuccess="isSuccess" :animationTimeout="100" @click="tpayTestMerchantCredentials" >\n        {{ $tc(\'tpay-shopware-payment.config.buttonCredentialsTest\') }}\n    </sw-button-process >\n{% endblock %}\n',inject:["TpayMerchantCredentialsService","systemConfigApiService"],mixins:[t.getByName("notification")],data(){return{isLoading:!1,isSuccess:!1,fields:[]}},methods:{tpayTestMerchantCredentials(){this.isLoading=!0,this.systemConfigApiService.getValues("CrehlerTpayShopwarePayment.config",null).then(e=>{this.fields=e;let t=this.getValue("merchantId"),a=this.getValue("merchantSecret"),n=this.getValue("merchantTrApiKey"),s=this.getValue("merchantTrApiPass");this.TpayMerchantCredentialsService.validateMerchantCredentials(t,a,n,s).then(e=>{if(this.isLoading=!1,!1===e.success){this.onInvalidData(e.code);return}if(!e.credentialsValid){this.onError();return}this.onSuccess()}).catch(()=>{this.isLoading=!1,this.onError()})})},onSuccess(){let e=this;this.isSuccess=!0,this.createNotificationSuccess({title:this.$tc("tpay-shopware-payment.config.successTestMerchantCredentialsNotificationTitle"),message:this.$tc("tpay-shopware-payment.config.successTestMerchantCredentialsNotificationMessage"),autoClose:!0}),setTimeout(()=>e.isSuccess=!1,2e3)},onError(){this.createNotificationError({title:this.$tc("tpay-shopware-payment.config.errorTestMerchantCredentialsNotificationTitle"),message:this.$tc("tpay-shopware-payment.config.errorTestMerchantCredentialsNotificationMessage"),autoClose:!0})},onInvalidData(e){let t="";switch(e){case"merchantId":t=this.$tc("tpay-shopware-payment.config.emptyMerchantId");break;case"merchantSecret":t=this.$tc("tpay-shopware-payment.config.emptyMerchantSecret");break;case"merchantTrApiKey":t=this.$tc("tpay-shopware-payment.config.emptyMerchantTrApiKey");break;case"merchantTrApiPass":t=this.$tc("tpay-shopware-payment.config.emptyMerchantTrApiPass");break;default:t=this.$tc("tpay-shopware-payment.config.errorTestMerchantCredentialsNotificationMessage")}this.createNotificationError({title:this.$tc("tpay-shopware-payment.config.errorTestMerchantCredentialsNotificationTitle"),message:t,autoClose:!0})},getFieldByName(e,t){return e.$children[0].$attrs.name==="CrehlerTpayShopwarePayment.config."+t},getValue(e){return this.fields["CrehlerTpayShopwarePayment.config."+e]}}});let{Component:a}=Shopware;a.override("sw-order-user-card",{template:"{% block sw_order_detail_base_secondary_info_payment %}\n    {% parent %}\n    <template v-if=\"isTpayPayment\">\n        <dt>{{ $tc('tpay-shopware-payment.order.tpayTransactionIdLabel') }}</dt>\n        <dd>{{ currentOrder.transactions.last().customFields.tpay_shopware_payment_transaction_id }}</dd>\n    </template>\n{% endblock %}\n",computed:{isTpayPayment(){let e=this.currentOrder.transactions.last().customFields;return null!==e&&e.hasOwnProperty("tpay_shopware_payment_transaction_id")&&e.tpay_shopware_payment_transaction_id.length>0}}});/**
 * @copyright 2020 Tpay Krajowy Integrator Płatności S.A. <https://tpay.com/>
 *
 * @author    Jakub Medyński <jme@crehler.com>
 * @support   Tpay <pt@tpay.com>
 * @created   23 kwi 2020
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */let n=Shopware.Classes.ApiService;class s extends n{constructor(e,t,a="tpay"){super(e,t,a)}validateMerchantCredentials(e,t,a,s){return this.httpClient.post(`_action/${this.getApiBasePath()}/validate-merchant-credentials`,{merchantId:e,merchantSecret:t,merchantTrApiKey:a,merchantTrApiPass:s},{headers:this.getBasicHeaders()}).then(e=>n.handleResponse(e))}}let{Application:i}=Shopware;i.addServiceProvider("TpayMerchantCredentialsService",e=>new s(i.getContainer("init").httpClient,e.loginService));var r=JSON.parse('{"tpay-shopware-payment":{"config":{"successTestMerchantCredentialsNotificationTitle":"Verbindung testen","successTestMerchantCredentialsNotificationMessage":"ine Testverbindung zum Tpay-Server wurde erfolgreich hergestellt.","errorTestMerchantCredentialsNotificationTitle":"Testverbindung fehlgeschlagen","errorTestMerchantCredentialsNotificationMessage":"Es gab ein Problem mit der Testverbindung. Bitte \xfcberpr\xfcfen Sie die angegebenen Daten","buttonCredentialsTest":"Verbindung testen","invalidTestMerchantCredentialsNotificationTitle":"Fehlende Daten","emptyMerchantId":"Vervollst\xe4ndigen Sie die H\xe4ndler-ID","emptyMerchantSecret":"F\xfcllen Sie den Sicherheitsschl\xfcssel aus","emptyMerchantTrApiKey":"Vervollst\xe4ndigen Sie den API-Schl\xfcssel","emptyMerchantTrApiPass":"Vervollst\xe4ndigen Sie das API-Passwort"},"order":{"tpayTransactionIdLabel":"Tpay-Transaktionskennzeichen"}}}'),c=JSON.parse('{"tpay-shopware-payment":{"config":{"successTestMerchantCredentialsNotificationTitle":"Valid merchant credentials","successTestMerchantCredentialsNotificationMessage":"A test connection to Tpay server was successfully established","errorTestMerchantCredentialsNotificationTitle":"Invalid merchant credentials","errorTestMerchantCredentialsNotificationMessage":"There was a problem with the test connection. Check the correctness of the provided data.","buttonCredentialsTest":"Test credentials","invalidTestMerchantCredentialsNotificationTitle":"Missing data","emptyMerchantId":"Complete the Merchant ID","emptyMerchantSecret":"Fill the security key","emptyMerchantTrApiKey":"Complete the API key","emptyMerchantTrApiPass":"Complete the API password"},"order":{"tpayTransactionIdLabel":"Tpay transaction identifier"}}}'),o=JSON.parse('{"tpay-shopware-payment":{"config":{"successTestMerchantCredentialsNotificationTitle":"Testowe połączenie","successTestMerchantCredentialsNotificationMessage":"Pomyślnie nawiązano testowe połączenie z serwerem Tpay","errorTestMerchantCredentialsNotificationTitle":"Nieudane testowe połączenie","errorTestMerchantCredentialsNotificationMessage":"Wystąpił problem z tetowym połączeniem. Sprawdź poprawność podanych danych","buttonCredentialsTest":"Przetestuj połączenie","invalidTestMerchantCredentialsNotificationTitle":"Brakujące dane","emptyMerchantId":"Uzupełnij identyfikator sprzedawcy","emptyMerchantSecret":"Uzupełnij klucz bezpieczeństwa","emptyMerchantTrApiKey":"Uzupełnij klucz API","emptyMerchantTrApiPass":"Uzupełnij hasło API"},"order":{"tpayTransactionIdLabel":"Identyfikator transakcji Tpay"}}}');Shopware.Locale.extend("de-DE",r),Shopware.Locale.extend("en-GB",c),Shopware.Locale.extend("pl-PL",o)}()})();